## Note: all of the config entries below are just examples with placeholders. Be sure to edit and adjust to your needs when uncommenting.

## In case your config entries all use a common input/output parent directory, you can specify those here.
##   Every input/output paths in the rest of the config will then be expressed relative to these.
##   Those two top-level keys are optional and default to "." (the directory of the config file).
 input_dir: TripMapp/Resources/
 output_dir: TripMapp/Resources/Generated/


# Generate constants for your localized strings.
#   Be sure that SwiftGen only parses ONE locale (typically Base.lproj, or en.lproj, or whichever your development region is); otherwise it will generate the same keys multiple times.
#   SwiftGen will parse all `.strings` files found in that folder.
# strings:
#   inputs:
#     - en.lproj/main.strings
#   outputs:
#      templatePath: SwiftGenTemplates/strings-structured-swift5.stencil
#      output: Strings+Generated.swift
#      params:
#        enumName: Strings
#        publicAccess: true



# Generate constants for your Assets Catalogs, including constants for images, colors, ARKit resources, etc.
#   This example also shows how to provide additional parameters to your template to customize the output.
#   - Especially the `forceProvidesNamespaces: true` param forces to create sub-namespace for each folder/group used in your Asset Catalogs, even the ones without "Provides Namespace". Without this param, SwiftGen only generates sub-namespaces for folders/groups which have the "Provides Namespace" box checked in the Inspector pane.
#   - To know which params are supported for a template, use `swiftgen template doc xcassets swift5` to open the template documentation on GitHub.
 xcassets:
   inputs:
     - Assets.xcassets
   outputs:
     - templatePath: SwiftGenTemplates/xcassets-swift5.stencil
       params:
         enumName: TripMappAssets
         forceProvidesNamespaces: true
       output: XCAssets+Generated.swift

# Generate constants for your Fonts Catalogs
# fonts:
#    inputs:
#      - Fonts
#    outputs:
#      templateName: swift5
#      output: Fonts.swift
